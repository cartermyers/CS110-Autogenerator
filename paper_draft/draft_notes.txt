- use list format for lists (and remove if unnecessary)
- distractor examples for every question (do i do this in GIFT? in html? in another format for readability?)
- gift vs. html comparison on example; probably need screenshots (see https://tex.stackexchange.com/questions/35155/lstlisting-in-two-columns)
- use /ref{} for references of sections (with /label{sec-asdf})                                                                     DONE
- bibtex
- quotations (`` and '')                                                                                                            DONE
- listings off the edge of paper (hard breaks)                                                                                      DONE
- watch out for "Of course," "Simply", "obviously"; if its obvious, dont say it
- define something first ("this is what a category is; why do students have difficulty with it"),
    then give them properites (like "how it relates to other problems")
- quotes out of verb (see in-line verb stuff)
- remove redundancies
- emphasize or bold names of categories (readability)                                                                               DONE
- watch out for orphans (figures/listings that run off of a page); package in an H box; maybe don't need hboxes and use [float] (this might need to be defined at every lstlisting; not just at the environment)
- put excerpts in figures?? maybe a listing environment?? look online for standard code excerpts online
- math expression: use \begin{equation}, and inside text use H box; also google about quantifiers: /, /- /.                         DONE
- separate prompt font and code excerpts!! (maybe not if im doing GIFT vs. rendered)
- maybe change lstlisting caption names? see https://tex.stackexchange.com/questions/64839/how-to-change-listing-caption


notes on

have a section for this in problem description
-
- what 110 is
- why we chose moodle
- why we chose GIFT (easy for students to write their questions, not syntax heavy)
- reference to Moodle article on GIFT? footnote for a webpage
- why cheating is a problem (mentioned in one paper -- Envisioning the use of online tests -- and they mention one solution is randomizing items)
- regular, small tests are useful (MC testing and student understanding, what is the connection)


put this right before unique answer
- intro section to describe distractors, why they need to be convincing, some examples
- whole section on distractors?

put this right before distractors?
- also a small intro on trivial cases (also has room for improvement)

(maybe for input/output flow)
- differentiate between GIFT code and C++ code
- three types of code:
    1) The main program
    2) The GIFT code it generates
    3) The code the students are learning



OUTLINES
=============

Problem description (extra)
--------------------------
- Main goals (as an outline):
    - Same difficulty between questions
    - Questions with an objective
    - Non-trivial questions
    - convincing distractors

- CS110 is a basic introductory undergrad programming class; spans many faculties; focuses on basic control structures and syntax (in this case, in C++)
- why we chose moodle (basically because URCourses is on it; but also because easy to upload; assign random question from bank; randomize answer order)
- why we chose GIFT (easy to parse; not syntax heavy; students also write their own questions, so thats easy)
- include footnote here

Distractors
--------------
- Maybe explain what they are
- an MC becomes too easy if a student can easily spot obvious wrong answers (not a great measure of knowledge)
- give some examples
- more complex techniques lead to us guaranteeing uniqueness (next section)


TODO:

maybe:
- more on distractors?
- abstract?

must:
- problem description
    - with main goals
    - with more intro on CS110, moodle, gift, etc.

- input/output flow (differentiate different types of code)

- trivial cases

- future Improvements

- conclusion
