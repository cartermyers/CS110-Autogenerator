Autogenerated Questions Paper Notes
(format pending)

Problem Description
--------------------
- online tests for large classes (N ~ 200)
- cheating is a Problem
- We want to give unique questions that have the same difficulty
- with Moodle (or any other online classroom), we can import questions given the markup language
- Also describe basic GIFT format and stuff?
- we can write a program to generate a virtually infinite amount of questions
- Moodle handles some parts (select question randomly from a bank for each student; randomize the order of answers)
- Level of randomness
    - not too random, but a structured question (like avoid bad randomness, and have controlled randomness - such as picking an increment from 1, 5, or 10)
    - have some randomness that doesn't really affect question but may "throw off" students (like different identifiers)
    - good to prevent trivial cases (like x - x)

Flow
--------------------
- Given the executable, there are a few inputs:
    a) A template control file that contains all information (around 7 inputs) EXPLAIN ALL INPUTS
    This way it's easy to make incremental changes and run the program multiple times.
    b) All command-line inputs. This can be cumbersome with the 7 inputs, but this allows us to
    c) Write a small script to generate all types of questions in one command.

- Maybe also explain some are subcategories and some are difficulty? Maybe just call it difficulty?
- All questions are output to a single file (specified in the inputs). In the case of (c), each category has its respective file (ending in "examples")
- With the inputs, this allows for some variability, such as excluding certain difficulties or subcategories.
- When imported to Moodle, because of the GIFT formatting, each subcategory (difficulty) appears as its own question bank, which allows us to give students the exact number for that difficulty.


Common Functions
--------------------
- Common program treats all questions the same (i.e. same format of prompt, right question, variable number of wrong questions)
- Convincing distractors need to be used (examples here), but then we must also guarantee that each answer is unique (and especially that no wrong answer is the same as the right answer.
    If it is not unique, we can sacrifice the convincing distractor for a unique one (that is close to the right answer). This is fairly simple in cases of integer answers, however,
    some answers involving a vector of arrays (see Arrays category). Since most answers are based on positioning, we can just shuffle the answer if it is not unique. However, we
    then need to guarantee all of the permutations are unique (to ensure we don't go in an infinite loop). ETC.


Testing (?)
--------------------
- Of course, it's important to make sure our generation actually creates the right answer, that's why we test the functions as best as possible.
    Wrong MC questions (in this context, where no correct answer -- or the correct answer is labelled as a wrong answer -- causes more work for the
    instructor than just making the question probably would).


AT END:
Fututre Improvements/What's next


********************
EACH CATEGORY
********************


These should be broken up into categories. Maybe expressions is first, loops is one, and other?


Template for each difficulty:
a) Here is the goal of the question (and how they differ between other difficulties)
b) Here is an example
c) Here are the random parts (what is important, what isn't, and how it serves the question purpose)
 - The importance needs to be mentioned by a different name. Maybe i) essential parts of a question (that is
 divided into ones that are randomized and ones that are not. For example) and ii) non-deterministic (or non-essential?) parts of a question?
 Basically, essential parts add to difficulty and are used to solve the question; non-deterministic parts are randomized
 (so they add to the individiualization or whatever) but they don't affect the essence of the question.
 Also, for the essential randomized parts, it may be important to note the domain of generated values.
 There are also some things that are determined by the random elements (e.g. the number of iterations a loop takes; "a - a" in an expression)
 and these can be modified to fit inside some defined parameters (i.e. we can modify the loop members to guarantee it runs a certain amount of times)
d) Here are the (interesting) distractor methods

Arrays
==================

Difficulty 1
--------------------
a) This question aims to test if students can correctly identify explicit access and assignment in an array.
b) What are the contents of the array after the following statements?
int bar[6] = {6, 5, 3, 8, 1, 9};
int temp;
temp = bar[4];
bar[4] = bar[1];
bar[1] = temp;
c) What's important (Domain):
	The size of the array (4 : 6)
	The contents   (unique integers 0 : 10)
	The first and second indices (0 : (size of array) - 1)
  What's not:
	The identifier of the array
d) Interesting distractor methods:
   Distractor 1: The original array
   Distractor 2: Off-by-one error (correct indices are added by one modulus size of array)
   Distractor 3: Off-by-one error (correct indices are subtracted by one)
   Distractor 4: Off-by-one errors in both directions (first index is subtracted by 1, the other is added by one)


Difficulty 2
--------------------
a) This question aims to test if students can correctly see how updates (and loops) affect array access
b) What are the contents of the array after the following?
int documents[6] = {3, 3, 10, 1, 1, 2};
for (int i = 0; i < 6; i += 1)
	{ documents[i] += 5; }
c) Important randomization:
    Size of array (3 : 6)
    Element update offset (between 1, 5, and 10)
    Array contents (integers 0 : 10)
   What's not:
    Array identifier
d) Interesting distractor methods:
    Distractor 1: The original array
    Distractor 2: Off-by-one error for update value (e.g. updates by 6 instead of 5)
    Distractor 3: Loop variable (as if it was assigned to the array value)
    Distractor 4: Subtracts the offset instead of adding


Difficulty 3
--------------------
a) This question aims to test if students can correctly identify spots in an array from a loop (and recognize out of bounds index errors).
b) What is printed after the following statements?
int dogs[6] = {0, 1, 7, 3, 0, 2};
for (int i = 1; i < 4; i = i + 1)
{
	cout << dogs[i] << " ";
}
c)
Essential but not random:
    Loop increment operator (always +=)
What's important:
    Size of array (0 : 6)
    Array contents (integers 0 : 10)
    Beginning value for i (0 : floor(size(array)) / 2)
    Loop comparison operator (either < or <=)
    Loop comparison operand (size(array) +/- 1)
    Loop increment operator (1 : 2)

    NOTE: each loop is guaranteed to iterate between 2 and 4 times
Not important:
    Array identifier
d) Interesting distractor methods:
    Distractor 1: Off-by-one error (correct indices are added by one loop increment modulus size of array)
    Distractor 2: Off-by-one error (correct indices are subtracted by one loop increment modulus size of array)
    Distractor 3: Simply the previous value in the array (off-by-one error)
    Distractor 4: "Run-time error due to out of bound index." - this has the option of being a correct answer, and
        then the previously generated correct answer would be used as a distractor


Loops Preamble

NOTE: should we also mention the "infinite loop" thing? It can be a part of the implementation, not necessary however.
But it does add some interesting stuff, like we can have non-homogeneous answer types (string and int), and
also methods to detect infinite loops and then change the answer accordingly.

Loop Counting
==================

Difficulty 1
--------------------
a) Test how many times the loop runs to test basic knowledge on loops
b) How many times does the '*' print?
for (int b = 4; b < 7; b = b + 1)
{
	cout << '*';
}
c)
Essential but not random:
    Comparison operator (always <)
    Increment Operator (always +=)
What's Important:
    Starting value (2 : 10 and then scaled based on increment)
    Ending value (start + increment * (3 : 6) + (0 : increment - 1))
    Increment (by 1, 5, or 10)
Not important:
    Identifier
d) Distractor 1: abs(Right answer - 1)
Distractor 2: Right answer + 1
Distractor 3 and 4: A random value that is the answer +/- 2


Difficulty 2
--------------------
a) Same structure and aim as difficulty 1, but it introduces more comparison operators
and a subtraction operator for increment.
b)
How many times does the '*' print?
int j = 53;
do
{
	cout << '*';
	j = j - 5;
} while (j >= 30);
c)
Essential but not random:

Essential (Domain):
    Starting value (same domain as Difficulty 1)
    Ending value
    Comparison operator (any of <, <=, >, >=)
    Increment operator (either += or -=)
    Increment (by 1, 5, or 10)
Non-essential:
    Identifier
d)


Difficulty 3
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:


Difficulty 4
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Loop Printing
==================

Difficulty 1
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 2
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 3
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Expressions
==================

Difficulty 1-4
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:


Functions
==================

Difficulty 1
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 2
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 3
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:




Switch Cases
==================

Difficulty 1
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 2
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 3
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 4
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:



Identifiers
==================

Difficulty 1
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 2
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 3
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 4
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:


Conditionals
==================

Difficulty 1
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 2
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 3
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:

Difficulty 4
--------------------
a)
b)
c)
Essential but not random:

Essential (Domain):

Non-essential:
d)
Distractor 1:
Distractor 2:
Distractor 3:
Distractor 4:
